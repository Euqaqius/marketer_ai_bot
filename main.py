import os
import logging
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai
import sqlite3
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
conn = sqlite3.connect("logs.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER,
    url TEXT,
    date TEXT,
    result TEXT
)
""")
conn.commit()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ò–ò-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ ü§ñ\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = extract_url(update.message.text)
    if not url:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç.")
        return

    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∞–π—Ç, —ç—Ç–æ –∑–∞–π–º—ë—Ç 10‚Äì15 —Å–µ–∫—É–Ω–¥...")

    try:
        headers = {
            "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                           "AppleWebKit/537.36 (KHTML, like Gecko) "
                           "Chrome/115.0.0.0 Safari/537.36")
        }
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        title = soup.title.string.strip() if soup.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        body_text = soup.get_text(separator=' ', strip=True)[:3000]

        prompt = (
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ UX.\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
            f"URL: {url}\n"
            f"–¢–µ–∫—Å—Ç —Å–∞–π—Ç–∞: {body_text}\n\n"
            f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞—É–¥–∏—Ç ‚Äî 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —á–∏—Å–ª–æ –∑–∞—è–≤–æ–∫. "
            f"–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ."
        )

        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )

        result = response.choices[0].message.content.strip()

        await update.message.reply_text(result)

        # –õ–æ–≥–∏—Ä—É–µ–º
        cursor.execute("INSERT INTO logs (telegram_id, url, date, result) VALUES (?, ?, ?, ?)", (
            update.message.from_user.id,
            url,
            datetime.now().isoformat(),
            result[:500]  # —É—Å–µ—á—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ))
        conn.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.\n–û—à–∏–±–∫–∞: {e}")


# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
def extract_url(text):
    if not text:
        return None
    if not text.startswith("http"):
        text = "http://" + text
    return text if "." in text else None

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    if not TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
    if not OPENAI_API_KEY:
        raise ValueError("OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
